{"version":3,"sources":["gmap/GMap.ts","App.tsx","index.tsx"],"names":["mapInitLat","mapInitLong","mapMarkersChunk","calcDistanceAsMeters","pos1Lat","pos1Long","pos2Lat","pos2Long","radiansLat1","Math","PI","radiansLat2","radianDiffLat","radianDiffLong","distanceAsMile","asin","sqrt","sin","cos","round","mapGetWidthAsMeters","map","bounds","getBounds","boundNorthEast","getNorthEast","boundSouthWest","getSouthWest","lat","lng","mapGetHeightAsMeters","mapCreateMarker","markerOptions","markerSize","defaultOptions","title","label","text","color","fontSize","fontWeight","fontFamily","icon","url","process","size","google","maps","Size","scaledSize","origin","Point","anchor","labelOrigin","position","LatLng","undefined","animation","Animation","DROP","marker","Marker","push","mapRemoveAllMarkers","setMap","splice","length","mapAutoZoomByBounds","markerLat","markerLong","mapBounds","LatLngBounds","extend","fitBounds","mapInitAsync","a","mapApiKey","mapElementId","mapCreateInitMarker","mapOptions","apiOptions","mapInitOptions","center","zoom","minZoom","maxZoom","backgroundColor","draggable","fullscreenControl","streetViewControl","zoomControl","mapTypeControl","rotateControl","scaleControl","panControl","keyboardShortcuts","mapTypeId","clickableIcons","styles","mapApiInitOptions","version","language","region","libraries","mapLoaderOptions","apiKey","divId","append","GoogleMap","initMap","mapInitMarker","App","useState","stateMap","setStateMap","latitude","longitude","stateMapPosition","setStateMapPosition","mapWidth","mapHeight","stateMapDistancesAsMeters","setStateMapDistancesAsMeters","stateMapWidthShow","setStateMapWidthShow","stateMapHeightShow","setStateMapHeightShow","mapInitAndEvents","useCallback","addListener","centerLat","getCenter","centerLong","setPosition","markerTitle","getTitle","console","log","useEffect","className","id","style","width","height","type","onClick","newMarkers","pos","newMarker","clearExistingMarkers","autoFitBounds","x","mapRecreateMarkers","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8d42e86.chunk.js","sourcesContent":["import { GoogleMap, MapsJSAPIOptions } from '@googlemaps/map-loader';\n\n// Map: Types and Interfaces: begin\ntype TGMapMarkerOptions = google.maps.MarkerOptions;\ntype TGMapMarker = google.maps.Marker;\ntype TGMapMarkers = Array<TGMapMarker>;\ntype TGMapLatLngBounds = google.maps.LatLngBounds;\ntype TGMapElement = google.maps.Map<Element>;\ntype TGMapLibraries = ('drawing' | 'geometry' | 'localContext' | 'places' | 'visualization')[];\ntype TGMapOptions = google.maps.MapOptions;\ntype TGMapApiOptions = MapsJSAPIOptions;\n\ninterface IGMapLoaderOptions {\n  apiKey: string;\n  divId: string;\n  append?: boolean;\n  mapOptions: TGMapOptions;\n  apiOptions?: TGMapApiOptions;\n}\n\ninterface IGMapInitAsync {\n  mapApiKey: string;\n  mapElementId: string;\n  mapCreateInitMarker: boolean;\n  mapOptions?: TGMapMarkerOptions;\n  apiOptions?: TGMapApiOptions;\n}\n\ninterface IGMapReturnData {\n  map: TGMapElement,\n  mapBounds: TGMapLatLngBounds;\n  mapInitMarker?: TGMapMarker,\n}\n\ninterface IGMapAutoZoomByBounds {\n  map: TGMapElement;\n  markerLat: number;\n  markerLong: number;\n  mapBounds?: TGMapLatLngBounds;\n}\n\ninterface IGMapRecreateMarkers {\n  map: TGMapElement;\n  newMarkers: TGMapMarkers,\n  clearExistingMarkers: boolean;\n  autoFitBounds?: boolean;\n  mapBounds?: TGMapLatLngBounds;\n}\n// Map: Types and Interfaces: end\n\n// Map: Init Variables: begin\nconst mapInitLat = 39.925018;\nconst mapInitLong = 32.836956;\n// Map: Init Variables: end\n\n// Map: Markers Chunk: begin\nconst mapMarkersChunk: TGMapMarkers = [];\n// Map: Markers Chunk: end\n\n// Map: Distance Calculator: begin\nconst calcDistanceAsMeters = (pos1Lat: number, pos1Long: number, pos2Lat: number, pos2Long: number) => {\n  const radiusOfTheEarth = 3958.8; // Radius of the Earth in miles\n  const radiansLat1 = pos1Lat * (Math.PI / 180); // Convert degrees to radians\n  const radiansLat2 = pos2Lat * (Math.PI / 180); // Convert degrees to radians\n  const radianDiffLat = radiansLat2 - radiansLat1; // Radian difference (latitudes)\n  const radianDiffLong = (pos2Long - pos1Long) * (Math.PI / 180); // Radian difference (longitudes)\n  const distanceAsMile = 2 * radiusOfTheEarth * Math.asin(Math.sqrt(Math.sin(radianDiffLat / 2) * Math.sin(radianDiffLat / 2) + Math.cos(radiansLat1) * Math.cos(radiansLat2) * Math.sin(radianDiffLong / 2) * Math.sin(radianDiffLong / 2)));\n  return Math.round(distanceAsMile * 1.609344 * 1000); // convert to km and convert to meters\n};\n\nconst mapGetWidthAsMeters = (map: TGMapElement): number => {\n  const bounds = map.getBounds();\n  if (bounds) {\n    const boundNorthEast = bounds.getNorthEast();\n    const boundSouthWest = bounds.getSouthWest();\n    const mapWidthAsMeters = calcDistanceAsMeters(\n      boundSouthWest.lat(),\n      boundNorthEast.lng(),\n      boundSouthWest.lat(),\n      boundSouthWest.lng(),\n    );\n    return mapWidthAsMeters;\n  }\n  return 1000; // fallback, 1km - 1000m\n};\n\nconst mapGetHeightAsMeters = (map: TGMapElement): number => {\n  const bounds = map.getBounds();\n  if (bounds) {\n    const boundNorthEast = bounds.getNorthEast();\n    const boundSouthWest = bounds.getSouthWest();\n    const mapHeightAsMeters = calcDistanceAsMeters(\n      boundNorthEast.lat(),\n      boundSouthWest.lng(),\n      boundSouthWest.lat(),\n      boundSouthWest.lng(),\n    );\n    return mapHeightAsMeters;\n  }\n  return 1000; // fallback, 1km - 1000m\n};\n// Map: Distance Calculator: end\n\n// Map: Create New Marker: begin\nconst mapCreateMarker = (markerOptions: TGMapMarkerOptions): TGMapMarker => {\n  const markerSize = 48;\n  const defaultOptions: TGMapMarkerOptions = {\n    title: 'Marker Title',\n    label: {\n      text: 'Marker Label',\n      color: '#fff',\n      fontSize: '13px',\n      fontWeight: '400',\n      fontFamily: '\"Red Hat Display\", sans-serif',\n    },\n    icon: {\n      url: `${process.env.PUBLIC_URL}/content/marker.png`,\n      size: new google.maps.Size(markerSize, markerSize),\n      scaledSize: new google.maps.Size(markerSize, markerSize),\n      origin: new google.maps.Point(0, 0),\n      anchor: new google.maps.Point(markerSize / 2, markerSize),\n      labelOrigin: new google.maps.Point(markerSize / 2, -(markerSize / 3)),\n    },\n    position: new google.maps.LatLng(mapInitLat, mapInitLong),\n    map: undefined,\n    animation: google.maps.Animation.DROP,\n  };\n\n  const marker = new google.maps.Marker({ ...defaultOptions, ...markerOptions });\n  mapMarkersChunk.push(marker);\n\n  return marker;\n};\n// Map: Create New Marker: end\n\n// Map: Remove All Markers: begin\nconst mapRemoveAllMarkers = (): void => {\n  mapMarkersChunk.map(marker => {\n    marker.setMap(null);\n  });\n  mapMarkersChunk.splice(0, mapMarkersChunk.length);\n};\n// Map: Remove All Markers: end\n\n// Map: Auto Zoom by Bounds: begin\nconst mapAutoZoomByBounds = ({ map, markerLat, markerLong, mapBounds }: IGMapAutoZoomByBounds): void => {\n  if (!mapBounds) {\n    mapBounds = new google.maps.LatLngBounds();\n  }\n  mapBounds.extend(new google.maps.LatLng(markerLat, markerLong));\n  map.fitBounds(mapBounds);\n};\n// Map: Auto Zoom by Bounds: end\n\n// Map: Recreate Markers: begin\nconst mapRecreateMarkers = ({ map, newMarkers, clearExistingMarkers, autoFitBounds, mapBounds }: IGMapRecreateMarkers): void => {\n  if (clearExistingMarkers) {\n    mapRemoveAllMarkers();\n  }\n  mapMarkersChunk.push(...newMarkers);\n  newMarkers.map(x => x.setMap(map));\n  if (autoFitBounds && mapBounds) {\n    map.fitBounds(mapBounds);\n  }\n};\n// Map: Recreate Markers: end\n\n\n// Map: Init: begin\nconst mapInitAsync = async ({ mapApiKey, mapElementId, mapCreateInitMarker, mapOptions, apiOptions }: IGMapInitAsync): Promise<IGMapReturnData> => {\n  const mapInitOptions: TGMapOptions = {\n    center: {\n      lat: mapInitLat,\n      lng: mapInitLong,\n    },\n    zoom: 13,\n    minZoom: 2,\n    maxZoom: 18,\n    backgroundColor: '#f8f8f8',\n    draggable: true,\n    fullscreenControl: false,\n    streetViewControl: false,\n    zoomControl: false,\n    mapTypeControl: false,\n    rotateControl: false,\n    scaleControl: false,\n    panControl: true,\n    keyboardShortcuts: false,\n    mapTypeId: 'roadmap', // \"roadmap\" || \"satellite\" || \"hybrid\" || \"terrain\"\n    clickableIcons: false,\n    styles: [],\n  };\n\n  const mapApiInitLibraries: TGMapLibraries = ['places'];\n  const mapApiInitOptions: TGMapApiOptions = {\n    version: 'weekly',\n    language: 'tr',\n    region: 'TR',\n    libraries: mapApiInitLibraries,\n  };\n\n  const mapLoaderOptions: IGMapLoaderOptions = {\n    apiKey: mapApiKey,\n    divId: mapElementId,\n    append: false, // true => creates a new div element and append it to the \"divId\" element.\n    mapOptions: { ...mapInitOptions, ...mapOptions },\n    apiOptions: { ...mapApiInitOptions, ...apiOptions },\n  };\n\n  const map: TGMapElement = await new GoogleMap().initMap(mapLoaderOptions);\n\n  const mapBounds = new google.maps.LatLngBounds();\n\n  if (mapCreateInitMarker) {\n    const mapInitMarker = mapCreateMarker({ map: map });\n\n    mapAutoZoomByBounds({\n      map,\n      markerLat: mapInitLat,\n      markerLong: mapInitLong,\n      mapBounds,\n    });\n\n    return {\n      map,\n      mapBounds,\n      mapInitMarker,\n    };\n  }\n\n  return {\n    map,\n    mapBounds,\n  };\n};\n// Map: Init: end\n\nexport type {\n  TGMapMarker,\n  TGMapMarkers,\n  TGMapMarkerOptions,\n  TGMapLatLngBounds,\n  TGMapElement,\n  TGMapLibraries,\n  TGMapOptions,\n  TGMapApiOptions,\n  IGMapLoaderOptions,\n  IGMapInitAsync,\n  IGMapReturnData,\n  IGMapAutoZoomByBounds,\n  IGMapRecreateMarkers,\n};\n\nexport {\n  mapInitAsync,\n  mapAutoZoomByBounds,\n  mapGetWidthAsMeters,\n  mapGetHeightAsMeters,\n  mapCreateMarker,\n  mapRemoveAllMarkers,\n  mapRecreateMarkers,\n};\n","import React, { useEffect, useCallback, useState } from 'react';\n\nimport { mapInitAsync, mapGetWidthAsMeters, mapGetHeightAsMeters, mapCreateMarker, mapRecreateMarkers, mapRemoveAllMarkers, TGMapElement, TGMapMarkers, TGMapLatLngBounds } from 'gmap/GMap';\n\nimport './App.scss';\n\ninterface IStateMap {\n  map: TGMapElement;\n  mapBounds: TGMapLatLngBounds;\n}\n\ninterface IStateMapPosition {\n  latitude: number;\n  longitude: number;\n}\n\ninterface IStateMapDistances {\n  mapWidth: number;\n  mapHeight: number;\n}\n\nfunction App(): React.ReactElement {\n  // App State: begin\n  const [stateMap, setStateMap] = useState<IStateMap | null>(null);\n  const [stateMapPosition, setStateMapPosition] = useState<IStateMapPosition>({ latitude: 0, longitude: 0 });\n  const [stateMapDistancesAsMeters, setStateMapDistancesAsMeters] = useState<IStateMapDistances>({ mapWidth: 0, mapHeight: 0 });\n  const [stateMapWidthShow, setStateMapWidthShow] = useState<boolean>(false);\n  const [stateMapHeightShow, setStateMapHeightShow] = useState<boolean>(false);\n  // App State: end\n\n  // GMap Init and Events: begin\n  const mapApiKey = ''; // restricted\n  const mapElementId = 'Map';\n  const mapCreateInitMarker = true;\n\n  const mapInitAndEvents = useCallback(async () => {\n    const { map, mapInitMarker, mapBounds } = await mapInitAsync({ mapApiKey, mapElementId, mapCreateInitMarker });\n    setStateMap({ map, mapBounds });\n\n    map.addListener('idle', () => {\n      const mapWidth = mapGetWidthAsMeters(map);\n      const mapHeight = mapGetHeightAsMeters(map);\n      setStateMapDistancesAsMeters({\n        mapWidth,\n        mapHeight,\n      });\n    });\n\n    map.addListener('center_changed', () => {\n      const centerLat = map.getCenter().lat();\n      const centerLong = map.getCenter().lng();\n      const mapWidth = mapGetWidthAsMeters(map);\n      const mapHeight = mapGetHeightAsMeters(map);\n\n      mapInitMarker?.setPosition({\n        lat: centerLat,\n        lng: centerLong,\n      });\n\n      setStateMapDistancesAsMeters({\n        mapWidth,\n        mapHeight,\n      });\n      setStateMapPosition({\n        latitude: centerLat,\n        longitude: centerLong,\n      });\n    });\n\n    mapInitMarker?.addListener('click', () => {\n      const markerTitle = mapInitMarker.getTitle();\n      console.log('mapInitMarker: ', mapInitMarker);\n      console.log('markerTitle: ', markerTitle);\n    });\n\n  }, [mapCreateInitMarker]);\n\n  useEffect(() => {\n    mapInitAndEvents();\n  }, [mapInitAndEvents]);\n  // GMap Init and Events: begin\n\n  // GMap Recreate Markers: begin\n  const mapReMarker = () => {\n    if (stateMap) {\n      const newPositions = [\n        {\n          markerLat: 39.925018,\n          markerLong: 32.836956,\n        },\n        {\n          markerLat: 41.08416633,\n          markerLong: 29.053666452,\n        },\n        {\n          markerLat: 38.41273,\n          markerLong: 27.13838,\n        },\n      ];\n\n      const newMarkers: TGMapMarkers = [];\n      newPositions.map(pos => {\n        const newMarker = mapCreateMarker({\n          position: {\n            lat: pos.markerLat,\n            lng: pos.markerLong,\n          },\n        });\n        stateMap.mapBounds.extend({\n          lat: pos.markerLat,\n          lng: pos.markerLong,\n        });\n        newMarkers.push(newMarker);\n      });\n\n      mapRecreateMarkers({\n        map: stateMap.map,\n        newMarkers: newMarkers,\n        clearExistingMarkers: true,\n        autoFitBounds: true,\n        mapBounds: stateMap.mapBounds,\n      });\n    }\n  };\n  // GMap Recreate Markers: end\n\n  // GMap Remove All Markers: begin\n  const mapRemoveAll = () => {\n    mapRemoveAllMarkers();\n  };\n  // GMap Remove All Markers: end\n\n  return (\n    <div className=\"app\">\n      <div id={mapElementId} className=\"app__map\" style={{ width: '100%', height: '100vh' }}></div>\n      <div className=\"app__center__pointer\"></div>\n      <div className=\"app__buttons\">\n        <button type=\"button\" className=\"app__button\" onClick={mapRemoveAll}>Remove Markers</button>\n        <button type=\"button\" className=\"app__button\" onClick={mapReMarker}>ReMarker</button>\n      </div>\n      <div className=\"app__info\">\n        <p className=\"app__info__text\">\n          <span className=\"app__info__key\">Map Center Latitude:</span>\n          <span className=\"app__info__value\">{stateMapPosition.latitude}</span>\n        </p>\n        <p className=\"app__info__text\">\n          <span className=\"app__info__key\">Map Center Longitude:</span>\n          <span className=\"app__info__value\">{stateMapPosition.longitude}</span>\n        </p>\n        <p\n          className=\"app__info__text\"\n          onMouseEnter={() => setStateMapWidthShow(true)}\n          onMouseLeave={() => setStateMapWidthShow(false)}\n          onTouchStart={() => setStateMapWidthShow(true)}\n          onTouchEnd={() => setStateMapWidthShow(false)}\n        >\n          <span className=\"app__info__key\">Map Width (Meters):</span>\n          <span className=\"app__info__value\">{stateMapDistancesAsMeters.mapWidth}</span>\n          <span className=\"app__info__highlight\">{'?'}</span>\n        </p>\n        <p\n          className=\"app__info__text\"\n          onMouseEnter={() => setStateMapHeightShow(true)}\n          onMouseLeave={() => setStateMapHeightShow(false)}\n          onTouchStart={() => setStateMapHeightShow(true)}\n          onTouchEnd={() => setStateMapHeightShow(false)}\n        >\n          <span className=\"app__info__key\">Map Height (Meters):</span>\n          <span className=\"app__info__value\">{stateMapDistancesAsMeters.mapHeight}</span>\n          <span className=\"app__info__highlight\">{'?'}</span>\n        </p>\n      </div>\n      <div className={`app__distance distance--width ${stateMapWidthShow ? 'state--active' : ''}`}></div>\n      <div className={`app__distance distance--height ${stateMapHeightShow ? 'state--active' : ''}`}></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('GMap'),\n);\n"],"sourceRoot":""}