{"version":3,"sources":["gmap/GMap.ts","App.tsx","index.tsx"],"names":["mapInitLat","mapInitLong","markers","mapGetDistanceAsKM","map","bounds","getBounds","boundNorthEast","getNorthEast","boundSouthWest","getSouthWest","p1Lat","p1Long","p2Lat","p2Long","radiansLat1","Math","PI","radiansLat2","radianDiffLat","radianDiffLong","distanceAsMile","asin","sqrt","sin","cos","round","calcDistanceAsKM","lat","lng","mapCreateMarker","markerOptions","markerSize","defaultOptions","title","label","text","color","fontSize","fontWeight","fontFamily","icon","url","process","size","google","maps","Size","scaledSize","origin","Point","anchor","labelOrigin","position","LatLng","undefined","animation","Animation","DROP","marker","Marker","push","mapClearAllMarkers","forEach","setMap","mapAdjustZoom","markerLat","markerLong","adjustZoomBounds","LatLngBounds","extend","fitBounds","mapInitAsync","a","mapApiKey","mapElementId","mapCreateInitMarker","mapOptions","apiOptions","mapInitOptions","center","zoom","minZoom","maxZoom","backgroundColor","draggable","fullscreenControl","streetViewControl","zoomControl","mapTypeControl","rotateControl","scaleControl","panControl","keyboardShortcuts","mapTypeId","clickableIcons","styles","mapApiInitOptions","version","language","region","libraries","mapLoaderOptions","apiKey","divId","append","mapLoader","GoogleMap","initMap","mapZoomBounds","mapInitMarker","App","useState","latitude","longitude","appStatePosition","setAppStatePosition","appStateDistanceAsKM","setAppStateDistanceAsKM","appStateShowDistance","setAppStateShowDistance","appMapInit","useCallback","addListener","km","centerLat","getCenter","centerLong","setPosition","markerTitle","getTitle","console","log","useEffect","className","id","style","width","height","type","onClick","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53b14638.chunk.js","sourcesContent":["import { GoogleMap, MapsJSAPIOptions } from '@googlemaps/map-loader';\n\n// Map: Types and Interfaces: begin\ntype TGMapMarkerOptions = google.maps.MarkerOptions;\ntype TGMapMarker = google.maps.Marker;\ntype TGMapMarkers = Array<TGMapMarker>;\ntype TGMapLatLngBounds = google.maps.LatLngBounds;\ntype TGMapElement = google.maps.Map<Element>;\ntype TGMapLibraries = ('drawing' | 'geometry' | 'localContext' | 'places' | 'visualization')[];\ntype TGMapOptions = google.maps.MapOptions;\ntype TGMapApiOptions = MapsJSAPIOptions;\n\ninterface IMapLoaderOptions {\n  apiKey: string;\n  divId: string;\n  append?: boolean;\n  mapOptions: TGMapOptions;\n  apiOptions?: TGMapApiOptions;\n}\n\ninterface IMapInitAsync {\n  mapApiKey: string;\n  mapElementId: string;\n  mapCreateInitMarker: boolean;\n  mapOptions?: TGMapMarkerOptions;\n  apiOptions?: TGMapApiOptions;\n}\n\ninterface IMapReturnData {\n  map: TGMapElement,\n  mapZoomBounds: TGMapLatLngBounds;\n  mapInitMarker?: TGMapMarker,\n}\n// Map: Types and Interfaces: end\n\n// Map: Init Variables: begin\nconst mapInitLat = 39.925018;\nconst mapInitLong = 32.836956;\n// Map: Init Variables: end\n\n// Map: Markers: begin\nconst markers: TGMapMarkers = [];\n// Map: Markers: end\n\n// Map: Distance Calculator: begin\nconst calcDistanceAsKM = (p1Lat: number, p1Long: number, p2Lat: number, p2Long: number) => {\n  const radiusOfTheEarth = 3958.8; // Radius of the Earth in miles\n  const radiansLat1 = p1Lat * (Math.PI / 180); // Convert degrees to radians\n  const radiansLat2 = p2Lat * (Math.PI / 180); // Convert degrees to radians\n  const radianDiffLat = radiansLat2 - radiansLat1; // Radian difference (latitudes)\n  const radianDiffLong = (p2Long - p1Long) * (Math.PI / 180); // Radian difference (longitudes)\n  const distanceAsMile = 2 * radiusOfTheEarth * Math.asin(Math.sqrt(Math.sin(radianDiffLat / 2) * Math.sin(radianDiffLat / 2) + Math.cos(radiansLat1) * Math.cos(radiansLat2) * Math.sin(radianDiffLong / 2) * Math.sin(radianDiffLong / 2)));\n  return Math.round(distanceAsMile * 1.609344 * 1000); // as km\n};\n\nconst mapGetDistanceAsKM = (map: TGMapElement): number => {\n  const bounds = map.getBounds();\n  if (bounds) {\n    const boundNorthEast = bounds.getNorthEast();\n    const boundSouthWest = bounds.getSouthWest();\n    const p1Lat = boundNorthEast.lat();\n    const p1Long = boundSouthWest.lng();\n    const p2Lat = boundSouthWest.lat();\n    const p2Long = boundSouthWest.lng();\n    const distanceAsKM = calcDistanceAsKM(p1Lat, p1Long, p2Lat, p2Long);\n    return distanceAsKM;\n  }\n  return 1000; // fallback as km\n};\n// Map: Distance Calculator: end\n\n// Map: Create New Marker: begin\nconst mapCreateMarker = (markerOptions: TGMapMarkerOptions): TGMapMarker => {\n  const markerSize = 48;\n  const defaultOptions: TGMapMarkerOptions = {\n    title: 'Marker Title',\n    label: {\n      text: 'Marker Label',\n      color: '#fff',\n      fontSize: '13px',\n      fontWeight: '400',\n      fontFamily: '\"Red Hat Display\", sans-serif',\n    },\n    icon: {\n      url: `${process.env.PUBLIC_URL}/content/marker.png`,\n      size: new google.maps.Size(markerSize, markerSize),\n      scaledSize: new google.maps.Size(markerSize, markerSize),\n      origin: new google.maps.Point(0, 0),\n      anchor: new google.maps.Point(markerSize / 2, markerSize),\n      labelOrigin: new google.maps.Point(markerSize / 2, -(markerSize / 3)),\n    },\n    position: new google.maps.LatLng(mapInitLat, mapInitLong),\n    map: undefined,\n    animation: google.maps.Animation.DROP,\n  };\n\n  const marker = new google.maps.Marker({ ...defaultOptions, ...markerOptions });\n  markers.push(marker);\n\n  return marker;\n};\n// Map: Create New Marker: end\n\n// Map: Clear All Markers: begin\nconst mapClearAllMarkers = (): void => {\n  markers.forEach((marker) => {\n    marker.setMap(null);\n  });\n};\n// Map: Clear All Markers: end\n\n// Map: Adjust Zoom: begin\nconst mapAdjustZoom = (map: TGMapElement, markerLat: number, markerLong: number, adjustZoomBounds?: TGMapLatLngBounds): void => {\n  if (!adjustZoomBounds) {\n    adjustZoomBounds = new google.maps.LatLngBounds();\n  }\n  adjustZoomBounds.extend(new google.maps.LatLng(markerLat, markerLong));\n  map.fitBounds(adjustZoomBounds);\n};\n// Map: Adjust Zoom: end\n\n// Map: Init: begin\nconst mapInitAsync = async ({ mapApiKey, mapElementId, mapCreateInitMarker, mapOptions, apiOptions }: IMapInitAsync): Promise<IMapReturnData> => {\n  const mapInitOptions: TGMapOptions = {\n    center: {\n      lat: mapInitLat,\n      lng: mapInitLong,\n    },\n    zoom: 13,\n    minZoom: 2,\n    maxZoom: 18,\n    backgroundColor: '#f8f8f8',\n    draggable: true,\n    fullscreenControl: false,\n    streetViewControl: false,\n    zoomControl: false,\n    mapTypeControl: false,\n    rotateControl: false,\n    scaleControl: false,\n    panControl: true,\n    keyboardShortcuts: false,\n    mapTypeId: 'roadmap', // \"roadmap\" || \"satellite\" || \"hybrid\" || \"terrain\"\n    clickableIcons: false,\n    styles: [],\n  };\n\n  const mapApiInitLibraries: TGMapLibraries = ['places'];\n  const mapApiInitOptions: TGMapApiOptions = {\n    version: 'weekly',\n    language: 'tr',\n    region: 'TR',\n    libraries: mapApiInitLibraries,\n  };\n\n  const mapLoaderOptions: IMapLoaderOptions = {\n    apiKey: mapApiKey,\n    divId: mapElementId,\n    append: false, // true => creates a new div element and append it to the \"divId\" element.\n    mapOptions: { ...mapInitOptions, ...mapOptions },\n    apiOptions: { ...mapApiInitOptions, ...apiOptions },\n  };\n\n  const mapLoader = new GoogleMap();\n\n  const map: TGMapElement = await mapLoader.initMap(mapLoaderOptions);\n\n  const mapZoomBounds = new google.maps.LatLngBounds();\n\n  if (mapCreateInitMarker) {\n    const mapInitMarker = mapCreateMarker({ map: map });\n    mapAdjustZoom(map, mapInitLat, mapInitLong, mapZoomBounds);\n\n    return {\n      map,\n      mapZoomBounds,\n      mapInitMarker,\n    };\n  }\n\n  return {\n    map,\n    mapZoomBounds,\n  };\n};\n// Map: Init: end\n\nexport type {\n  TGMapMarker,\n  TGMapMarkers,\n  TGMapMarkerOptions,\n  TGMapLatLngBounds,\n  TGMapElement,\n  TGMapLibraries,\n  TGMapOptions,\n  TGMapApiOptions,\n  IMapLoaderOptions,\n  IMapInitAsync,\n  IMapReturnData,\n};\n\nexport {\n  mapInitAsync,\n  mapGetDistanceAsKM,\n  mapCreateMarker,\n  mapClearAllMarkers,\n  mapAdjustZoom,\n};\n","import React, { useEffect, useCallback, useState } from 'react';\n\nimport { mapInitAsync, mapGetDistanceAsKM, mapClearAllMarkers } from 'gmap/GMap';\n\nimport './App.scss';\n\ninterface IAppStatePosition {\n  latitude: number;\n  longitude: number;\n}\n\nfunction App(): React.ReactElement {\n  // App State: begin\n  const [appStatePosition, setAppStatePosition] = useState<IAppStatePosition>({ latitude: 0, longitude: 0 });\n  const [appStateDistanceAsKM, setAppStateDistanceAsKM] = useState<number>(0);\n  const [appStateShowDistance, setAppStateShowDistance] = useState<boolean>(false);\n  // App State: end\n\n  // Map: begin\n  const mapApiKey = 'AIzaSyA6TZYmSMAyAvrWL9Cdu0sKpGhn-1OZSvc'; // restricted\n  const mapElementId = 'Map';\n  const mapCreateInitMarker = true;\n\n  const appMapInit = useCallback(async () => {\n    const { map, mapInitMarker } = await mapInitAsync({ mapApiKey, mapElementId, mapCreateInitMarker });\n\n    map.addListener('idle', () => {\n      const km = mapGetDistanceAsKM(map);\n      setAppStateDistanceAsKM(km);\n    });\n\n    map.addListener('center_changed', () => {\n      const centerLat = map.getCenter().lat();\n      const centerLong = map.getCenter().lng();\n      const km = mapGetDistanceAsKM(map);\n\n      mapInitMarker?.setPosition({\n        lat: centerLat,\n        lng: centerLong,\n      });\n\n      setAppStateDistanceAsKM(km);\n      setAppStatePosition({\n        latitude: centerLat,\n        longitude: centerLong,\n      });\n    });\n\n    mapInitMarker?.addListener('click', () => {\n      const markerTitle = mapInitMarker.getTitle();\n      console.log('mapInitMarker: ', mapInitMarker);\n      console.log('markerTitle: ', markerTitle);\n    });\n  }, [mapCreateInitMarker]);\n\n  useEffect(() => {\n    appMapInit();\n  }, [appMapInit]);\n  // Map: end\n\n  return (\n    <div className=\"app\">\n      <div id={mapElementId} className=\"app__map\" style={{ width: '100%', height: '100vh' }}></div>\n      <div className=\"app__center__pointer\"></div>\n      <div className=\"app__buttons state--passive\">\n        <button type=\"button\" className=\"app__button\" onClick={mapClearAllMarkers}>Remove Markers</button>\n      </div>\n      <div className=\"app__info\">\n        <p className=\"app__info__text\">\n          <span className=\"app__info__key\">Center Latitude:</span>\n          <span className=\"app__info__value\">{appStatePosition.latitude}</span>\n        </p>\n        <p className=\"app__info__text\">\n          <span className=\"app__info__key\">Center Longitude:</span>\n          <span className=\"app__info__value\">{appStatePosition.longitude}</span>\n        </p>\n        <p\n          className=\"app__info__text\"\n          onMouseEnter={() => setAppStateShowDistance(true)}\n          onMouseLeave={() => setAppStateShowDistance(false)}\n          onTouchStart={() => setAppStateShowDistance(true)}\n          onTouchEnd={() => setAppStateShowDistance(false)}\n        >\n          <span className=\"app__info__key\">Map Height Distance (Kilometer):</span>\n          <span className=\"app__info__value\">{appStateDistanceAsKM}</span>\n          <span className=\"app__info__highlight\">{'?'}</span>\n        </p>\n      </div>\n      <div className={`app__distance ${appStateShowDistance ? 'state--active' : ''}`}></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('GMap'),\n);\n"],"sourceRoot":""}