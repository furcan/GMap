{"version":3,"sources":["gmap/GMap.ts","App.tsx","index.tsx"],"names":["mapInitLat","mapInitLong","mapMarkersChunk","mapGetHeightAsMeters","map","bounds","getBounds","boundNorthEast","getNorthEast","boundSouthWest","getSouthWest","p1Lat","p1Long","p2Lat","p2Long","radiansLat1","Math","PI","radiansLat2","radianDiffLat","radianDiffLong","distanceAsMile","asin","sqrt","sin","cos","round","calcDistanceAsMeters","lat","lng","mapCreateMarker","markerOptions","markerSize","defaultOptions","title","label","text","color","fontSize","fontWeight","fontFamily","icon","url","process","size","google","maps","Size","scaledSize","origin","Point","anchor","labelOrigin","position","LatLng","undefined","animation","Animation","DROP","marker","Marker","push","mapRemoveAllMarkers","setMap","splice","length","mapAutoZoomByBounds","markerLat","markerLong","mapBounds","LatLngBounds","extend","fitBounds","mapInitAsync","a","mapApiKey","mapElementId","mapCreateInitMarker","mapOptions","apiOptions","mapInitOptions","center","zoom","minZoom","maxZoom","backgroundColor","draggable","fullscreenControl","streetViewControl","zoomControl","mapTypeControl","rotateControl","scaleControl","panControl","keyboardShortcuts","mapTypeId","clickableIcons","styles","mapApiInitOptions","version","language","region","libraries","mapLoaderOptions","apiKey","divId","append","GoogleMap","initMap","mapInitMarker","App","useState","stateMap","setStateMap","latitude","longitude","stateMapPosition","setStateMapPosition","stateMapHeightAsMeters","setStateMapHeightAsMeters","stateMapHeightShow","setStateMapHeightShow","mapInitAndEvents","useCallback","addListener","meters","centerLat","getCenter","centerLong","setPosition","markerTitle","getTitle","console","log","useEffect","className","id","style","width","height","type","onClick","newMarkers","pos","newMarker","clearExistingMarkers","autoFitBounds","x","mapRecreateMarkers","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65af651b.chunk.js","sourcesContent":["import { GoogleMap, MapsJSAPIOptions } from '@googlemaps/map-loader';\r\n\r\n// Map: Types and Interfaces: begin\r\ntype TGMapMarkerOptions = google.maps.MarkerOptions;\r\ntype TGMapMarker = google.maps.Marker;\r\ntype TGMapMarkers = Array<TGMapMarker>;\r\ntype TGMapLatLngBounds = google.maps.LatLngBounds;\r\ntype TGMapElement = google.maps.Map<Element>;\r\ntype TGMapLibraries = ('drawing' | 'geometry' | 'localContext' | 'places' | 'visualization')[];\r\ntype TGMapOptions = google.maps.MapOptions;\r\ntype TGMapApiOptions = MapsJSAPIOptions;\r\n\r\ninterface IGMapLoaderOptions {\r\n  apiKey: string;\r\n  divId: string;\r\n  append?: boolean;\r\n  mapOptions: TGMapOptions;\r\n  apiOptions?: TGMapApiOptions;\r\n}\r\n\r\ninterface IGMapInitAsync {\r\n  mapApiKey: string;\r\n  mapElementId: string;\r\n  mapCreateInitMarker: boolean;\r\n  mapOptions?: TGMapMarkerOptions;\r\n  apiOptions?: TGMapApiOptions;\r\n}\r\n\r\ninterface IGMapReturnData {\r\n  map: TGMapElement,\r\n  mapBounds: TGMapLatLngBounds;\r\n  mapInitMarker?: TGMapMarker,\r\n}\r\n\r\ninterface IGMapAutoZoomByBounds {\r\n  map: TGMapElement;\r\n  markerLat: number;\r\n  markerLong: number;\r\n  mapBounds?: TGMapLatLngBounds;\r\n}\r\n\r\ninterface IGMapRecreateMarkers {\r\n  map: TGMapElement;\r\n  newMarkers: TGMapMarkers,\r\n  clearExistingMarkers: boolean;\r\n  autoFitBounds?: boolean;\r\n  mapBounds?: TGMapLatLngBounds;\r\n}\r\n// Map: Types and Interfaces: end\r\n\r\n// Map: Init Variables: begin\r\nconst mapInitLat = 39.925018;\r\nconst mapInitLong = 32.836956;\r\n// Map: Init Variables: end\r\n\r\n// Map: Markers Chunk: begin\r\nconst mapMarkersChunk: TGMapMarkers = [];\r\n// Map: Markers Chunk: end\r\n\r\n// Map: Distance Calculator: begin\r\nconst calcDistanceAsMeters = (p1Lat: number, p1Long: number, p2Lat: number, p2Long: number) => {\r\n  const radiusOfTheEarth = 3958.8; // Radius of the Earth in miles\r\n  const radiansLat1 = p1Lat * (Math.PI / 180); // Convert degrees to radians\r\n  const radiansLat2 = p2Lat * (Math.PI / 180); // Convert degrees to radians\r\n  const radianDiffLat = radiansLat2 - radiansLat1; // Radian difference (latitudes)\r\n  const radianDiffLong = (p2Long - p1Long) * (Math.PI / 180); // Radian difference (longitudes)\r\n  const distanceAsMile = 2 * radiusOfTheEarth * Math.asin(Math.sqrt(Math.sin(radianDiffLat / 2) * Math.sin(radianDiffLat / 2) + Math.cos(radiansLat1) * Math.cos(radiansLat2) * Math.sin(radianDiffLong / 2) * Math.sin(radianDiffLong / 2)));\r\n  return Math.round(distanceAsMile * 1.609344 * 1000); // convert to km and convert to meters\r\n};\r\n\r\nconst mapGetHeightAsMeters = (map: TGMapElement): number => {\r\n  const bounds = map.getBounds();\r\n  if (bounds) {\r\n    const boundNorthEast = bounds.getNorthEast();\r\n    const boundSouthWest = bounds.getSouthWest();\r\n    const p1Lat = boundNorthEast.lat();\r\n    const p1Long = boundSouthWest.lng();\r\n    const p2Lat = boundSouthWest.lat();\r\n    const p2Long = boundSouthWest.lng();\r\n    const distanceAsMeters = calcDistanceAsMeters(p1Lat, p1Long, p2Lat, p2Long);\r\n    return distanceAsMeters;\r\n  }\r\n  return 1000; // fallback, 1km - 1000m\r\n};\r\n// Map: Distance Calculator: end\r\n\r\n// Map: Create New Marker: begin\r\nconst mapCreateMarker = (markerOptions: TGMapMarkerOptions): TGMapMarker => {\r\n  const markerSize = 48;\r\n  const defaultOptions: TGMapMarkerOptions = {\r\n    title: 'Marker Title',\r\n    label: {\r\n      text: 'Marker Label',\r\n      color: '#fff',\r\n      fontSize: '13px',\r\n      fontWeight: '400',\r\n      fontFamily: '\"Red Hat Display\", sans-serif',\r\n    },\r\n    icon: {\r\n      url: `${process.env.PUBLIC_URL}/content/marker.png`,\r\n      size: new google.maps.Size(markerSize, markerSize),\r\n      scaledSize: new google.maps.Size(markerSize, markerSize),\r\n      origin: new google.maps.Point(0, 0),\r\n      anchor: new google.maps.Point(markerSize / 2, markerSize),\r\n      labelOrigin: new google.maps.Point(markerSize / 2, -(markerSize / 3)),\r\n    },\r\n    position: new google.maps.LatLng(mapInitLat, mapInitLong),\r\n    map: undefined,\r\n    animation: google.maps.Animation.DROP,\r\n  };\r\n\r\n  const marker = new google.maps.Marker({ ...defaultOptions, ...markerOptions });\r\n  mapMarkersChunk.push(marker);\r\n\r\n  return marker;\r\n};\r\n// Map: Create New Marker: end\r\n\r\n// Map: Remove All Markers: begin\r\nconst mapRemoveAllMarkers = (): void => {\r\n  mapMarkersChunk.map(marker => {\r\n    marker.setMap(null);\r\n  });\r\n  mapMarkersChunk.splice(0, mapMarkersChunk.length);\r\n};\r\n// Map: Remove All Markers: end\r\n\r\n// Map: Auto Zoom by Bounds: begin\r\nconst mapAutoZoomByBounds = ({ map, markerLat, markerLong, mapBounds }: IGMapAutoZoomByBounds): void => {\r\n  if (!mapBounds) {\r\n    mapBounds = new google.maps.LatLngBounds();\r\n  }\r\n  mapBounds.extend(new google.maps.LatLng(markerLat, markerLong));\r\n  map.fitBounds(mapBounds);\r\n};\r\n// Map: Auto Zoom by Bounds: end\r\n\r\n// Map: Recreate Markers: begin\r\nconst mapRecreateMarkers = ({ map, newMarkers, clearExistingMarkers, autoFitBounds, mapBounds }: IGMapRecreateMarkers): void => {\r\n  if (clearExistingMarkers) {\r\n    mapRemoveAllMarkers();\r\n  }\r\n  mapMarkersChunk.push(...newMarkers);\r\n  newMarkers.map(x => x.setMap(map));\r\n  if (autoFitBounds && mapBounds) {\r\n    map.fitBounds(mapBounds);\r\n  }\r\n};\r\n// Map: Recreate Markers: end\r\n\r\n\r\n// Map: Init: begin\r\nconst mapInitAsync = async ({ mapApiKey, mapElementId, mapCreateInitMarker, mapOptions, apiOptions }: IGMapInitAsync): Promise<IGMapReturnData> => {\r\n  const mapInitOptions: TGMapOptions = {\r\n    center: {\r\n      lat: mapInitLat,\r\n      lng: mapInitLong,\r\n    },\r\n    zoom: 13,\r\n    minZoom: 2,\r\n    maxZoom: 18,\r\n    backgroundColor: '#f8f8f8',\r\n    draggable: true,\r\n    fullscreenControl: false,\r\n    streetViewControl: false,\r\n    zoomControl: false,\r\n    mapTypeControl: false,\r\n    rotateControl: false,\r\n    scaleControl: false,\r\n    panControl: true,\r\n    keyboardShortcuts: false,\r\n    mapTypeId: 'roadmap', // \"roadmap\" || \"satellite\" || \"hybrid\" || \"terrain\"\r\n    clickableIcons: false,\r\n    styles: [],\r\n  };\r\n\r\n  const mapApiInitLibraries: TGMapLibraries = ['places'];\r\n  const mapApiInitOptions: TGMapApiOptions = {\r\n    version: 'weekly',\r\n    language: 'tr',\r\n    region: 'TR',\r\n    libraries: mapApiInitLibraries,\r\n  };\r\n\r\n  const mapLoaderOptions: IGMapLoaderOptions = {\r\n    apiKey: mapApiKey,\r\n    divId: mapElementId,\r\n    append: false, // true => creates a new div element and append it to the \"divId\" element.\r\n    mapOptions: { ...mapInitOptions, ...mapOptions },\r\n    apiOptions: { ...mapApiInitOptions, ...apiOptions },\r\n  };\r\n\r\n  const map: TGMapElement = await new GoogleMap().initMap(mapLoaderOptions);\r\n\r\n  const mapBounds = new google.maps.LatLngBounds();\r\n\r\n  if (mapCreateInitMarker) {\r\n    const mapInitMarker = mapCreateMarker({ map: map });\r\n\r\n    mapAutoZoomByBounds({\r\n      map,\r\n      markerLat: mapInitLat,\r\n      markerLong: mapInitLong,\r\n      mapBounds,\r\n    });\r\n\r\n    return {\r\n      map,\r\n      mapBounds,\r\n      mapInitMarker,\r\n    };\r\n  }\r\n\r\n  return {\r\n    map,\r\n    mapBounds,\r\n  };\r\n};\r\n// Map: Init: end\r\n\r\nexport type {\r\n  TGMapMarker,\r\n  TGMapMarkers,\r\n  TGMapMarkerOptions,\r\n  TGMapLatLngBounds,\r\n  TGMapElement,\r\n  TGMapLibraries,\r\n  TGMapOptions,\r\n  TGMapApiOptions,\r\n  IGMapLoaderOptions,\r\n  IGMapInitAsync,\r\n  IGMapReturnData,\r\n  IGMapAutoZoomByBounds,\r\n  IGMapRecreateMarkers,\r\n};\r\n\r\nexport {\r\n  mapInitAsync,\r\n  mapAutoZoomByBounds,\r\n  mapGetHeightAsMeters,\r\n  mapCreateMarker,\r\n  mapRemoveAllMarkers,\r\n  mapRecreateMarkers,\r\n};\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\n\r\nimport { mapInitAsync, mapGetHeightAsMeters, mapCreateMarker, mapRecreateMarkers, mapRemoveAllMarkers, TGMapElement, TGMapMarkers, TGMapLatLngBounds } from 'gmap/GMap';\r\n\r\nimport './App.scss';\r\n\r\ninterface IStateMap {\r\n  map: TGMapElement;\r\n  mapBounds: TGMapLatLngBounds;\r\n}\r\n\r\ninterface IStateMapPosition {\r\n  latitude: number;\r\n  longitude: number;\r\n}\r\n\r\nfunction App(): React.ReactElement {\r\n  // App State: begin\r\n  const [stateMap, setStateMap] = useState<IStateMap | null>(null);\r\n  const [stateMapPosition, setStateMapPosition] = useState<IStateMapPosition>({ latitude: 0, longitude: 0 });\r\n  const [stateMapHeightAsMeters, setStateMapHeightAsMeters] = useState<number>(0);\r\n  const [stateMapHeightShow, setStateMapHeightShow] = useState<boolean>(false);\r\n  // App State: end\r\n\r\n  // GMap Init and Events: begin\r\n  const mapApiKey = ''; // restricted\r\n  const mapElementId = 'Map';\r\n  const mapCreateInitMarker = true;\r\n\r\n  const mapInitAndEvents = useCallback(async () => {\r\n    const { map, mapInitMarker, mapBounds } = await mapInitAsync({ mapApiKey, mapElementId, mapCreateInitMarker });\r\n    setStateMap({ map, mapBounds });\r\n\r\n    map.addListener('idle', () => {\r\n      const meters = mapGetHeightAsMeters(map);\r\n      setStateMapHeightAsMeters(meters);\r\n    });\r\n\r\n    map.addListener('center_changed', () => {\r\n      const centerLat = map.getCenter().lat();\r\n      const centerLong = map.getCenter().lng();\r\n      const meters = mapGetHeightAsMeters(map);\r\n\r\n      mapInitMarker?.setPosition({\r\n        lat: centerLat,\r\n        lng: centerLong,\r\n      });\r\n\r\n      setStateMapHeightAsMeters(meters);\r\n      setStateMapPosition({\r\n        latitude: centerLat,\r\n        longitude: centerLong,\r\n      });\r\n    });\r\n\r\n    mapInitMarker?.addListener('click', () => {\r\n      const markerTitle = mapInitMarker.getTitle();\r\n      console.log('mapInitMarker: ', mapInitMarker);\r\n      console.log('markerTitle: ', markerTitle);\r\n    });\r\n\r\n  }, [mapCreateInitMarker]);\r\n\r\n  useEffect(() => {\r\n    mapInitAndEvents();\r\n  }, [mapInitAndEvents]);\r\n  // GMap Init and Events: begin\r\n\r\n  // GMap Recreate Markers: begin\r\n  const mapReMarker = () => {\r\n    if (stateMap) {\r\n      const newPositions = [\r\n        {\r\n          markerLat: 39.925018,\r\n          markerLong: 32.836956,\r\n        },\r\n        {\r\n          markerLat: 41.08416633,\r\n          markerLong: 29.053666452,\r\n        },\r\n        {\r\n          markerLat: 38.41273,\r\n          markerLong: 27.13838,\r\n        },\r\n      ];\r\n\r\n      const newMarkers: TGMapMarkers = [];\r\n      newPositions.map(pos => {\r\n        const newMarker = mapCreateMarker({\r\n          position: {\r\n            lat: pos.markerLat,\r\n            lng: pos.markerLong,\r\n          },\r\n        });\r\n        stateMap.mapBounds.extend({\r\n          lat: pos.markerLat,\r\n          lng: pos.markerLong,\r\n        });\r\n        newMarkers.push(newMarker);\r\n      });\r\n\r\n      mapRecreateMarkers({\r\n        map: stateMap.map,\r\n        newMarkers: newMarkers,\r\n        clearExistingMarkers: true,\r\n        autoFitBounds: true,\r\n        mapBounds: stateMap.mapBounds,\r\n      });\r\n    }\r\n  };\r\n  // GMap Recreate Markers: end\r\n\r\n  // GMap Remove All Markers: begin\r\n  const mapRemoveAll = () => {\r\n    mapRemoveAllMarkers();\r\n  };\r\n  // GMap Remove All Markers: end\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div id={mapElementId} className=\"app__map\" style={{ width: '100%', height: '100vh' }}></div>\r\n      <div className=\"app__center__pointer\"></div>\r\n      <div className=\"app__buttons\">\r\n        <button type=\"button\" className=\"app__button\" onClick={mapRemoveAll}>Remove Markers</button>\r\n        <button type=\"button\" className=\"app__button\" onClick={mapReMarker}>ReMarker</button>\r\n      </div>\r\n      <div className=\"app__info\">\r\n        <p className=\"app__info__text\">\r\n          <span className=\"app__info__key\">Map Center Latitude:</span>\r\n          <span className=\"app__info__value\">{stateMapPosition.latitude}</span>\r\n        </p>\r\n        <p className=\"app__info__text\">\r\n          <span className=\"app__info__key\">Map Center Longitude:</span>\r\n          <span className=\"app__info__value\">{stateMapPosition.longitude}</span>\r\n        </p>\r\n        <p\r\n          className=\"app__info__text\"\r\n          onMouseEnter={() => setStateMapHeightShow(true)}\r\n          onMouseLeave={() => setStateMapHeightShow(false)}\r\n          onTouchStart={() => setStateMapHeightShow(true)}\r\n          onTouchEnd={() => setStateMapHeightShow(false)}\r\n        >\r\n          <span className=\"app__info__key\">Map Height (Meters):</span>\r\n          <span className=\"app__info__value\">{stateMapHeightAsMeters}</span>\r\n          <span className=\"app__info__highlight\">{'?'}</span>\r\n        </p>\r\n      </div>\r\n      <div className={`app__distance ${stateMapHeightShow ? 'state--active' : ''}`}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('GMap'),\r\n);\r\n"],"sourceRoot":""}